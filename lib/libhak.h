/*  libhak.h - Main libhak header.
    
    Copyright 2013  Francisco Jose Monaco   <monaco.fj@gmail.com>

    This file is part of Libhack. 

    Libhack is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Libhack is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with .  If not, see <http://www.gnu.org/licenses/>. 

*/

#ifndef _LIBHAK_H
#define _LIBHAK_H

#include <errno.h>
#include <string.h>
#include <config.h>

/* Libhak engine. */

typedef struct hak_engine_t hak_engine_t;
struct hak_engine_t
{
  int hak_errno;		/* Error code generated by the last functional call. */
  char *program_name;		/* Program invocation short name. */
  int argc;			/* Number of command line arguments. */
  char **argv;			/* Pointer to the command line arguments. */
};

extern hak_engine_t hak_engine;

/* Useful macros. */

#define HAK_TRUE  1
#define HAK_FALSE 0

/* Show basic libhak information. */

void hak_info(void);

/* Initialize libhak engine.  */

int hak_initialize (int, char **);

/* 
   Event report functions and macros. 
*/

/* System fatal error. */
#define hak_sysfatal(args) do{ if (args) {fprintf (stderr, "%s: %s: %d: %s\n", hak_engine.program_name, __FILE__, __LINE__, strerror(errno)); exit (EXIT_FAILURE);}}while(0)

/* System non-fatal error. */
#define hak_sysnfatal(args) do{ if (args) {fprintf (stderr,"%s: %s: %d: %s\n", hak_engine.program_name, __FILE__, __LINE__, strerror(errno));}}while(0)

/* System error: fatal if HAK_SYSFATAL is defined; non-fatal oterwise. 
   HAK_SYSFATAL is not defined by default, so hak_sysfatal  is the default. */

#if (HAK_SYSFATAL != HAK_FALSE) 
#define hak_syserror(args) hak_sysfatal(args)
#else
#define hak_syserror(args) hak_sysnfatal(args)
#endif	/* HAK_SYSFATAL */


#endif	/* _LIBHAK_H */
