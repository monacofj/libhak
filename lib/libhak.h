/*  libhak.h - Main libhak header.
    
    Copyright 2013  Francisco Jose Monaco   <monaco.fj@gmail.com>

    This file is part of Libhack. 

    Libhack is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Libhack is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with .  If not, see <http://www.gnu.org/licenses/>. 

*/

#ifndef _LIBHAK_H
#define _LIBHAK_H

#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <config.h>

/* Libhak engine. */

typedef struct hak_engine_t hak_engine_t;
struct hak_engine_t
{
  int error;		        /* Error code generated by the last functional call. */
  char *program_name;		/* Program invocation short name. */
  int argc;			/* Number of command line arguments. */
  char **argv;			/* Pointer to the command line arguments. */
  FILE *logstream;		/* Where to log messages. */
  char *logsymbol;
};

extern hak_engine_t hak_engine;

/* Useful macros. */

#define HAK_TRUE  1
#define HAK_FALSE 0

/* Show basic libhak information. */

void hak_info(void);

/* Initialize libhak engine.  */

int hak_initialize (int, char **);

/* 
   Event report functions and macros. 
*/

#ifndef HAK_FATAL
#define HAK_FATAL HAK_TRUE
#endif

#ifndef HAK_SYSFATAL
#define HAK_SYSFATAL HAK_TRUE
#endif


/* System fatal error. */
#define hak_sysfatal(expression) do{ if (expression) {fprintf (stderr, "%s: %s: %d: %s\n", hak_engine.program_name, __FILE__, __LINE__, strerror(errno)); exit (EXIT_FAILURE);}}while(0)

/* System non-fatal error. */
#define hak_sysnfatal(expression) do{ if (expression) {fprintf (stderr,"%s: %s: %d: %s\n", hak_engine.program_name, __FILE__, __LINE__, strerror(errno));}}while(0)

/* System error: fatal if HAK_SYSFATAL is defined; non-fatal oterwise. 
   HAK_SYSFATAL is true by default. */

#if (HAK_SYSFATAL != HAK_FALSE) 
#define hak_syserror(expression) hak_sysfatal(expression)
#else
#define hak_syserror(expression) hak_sysnfatal(expression)
#endif	/* HAK_SYSFATAL */

/* Values of hak_engine.errno */

typedef enum 
  {
    hak_error_null		/* Argument NULL not valid. */
  } hak_error_t;

extern const char* hak_error_messages[];

#define _hak_set_error(error_code) do{hak_engine.error = error_code;}while(0)

/* Libhak fatal. */
#define hak_fatal(expression, error_code) do{if (expression) {_hak_set_error(error_code); fprintf (stderr, "%s: %s: %d: %s (hak)\n", hak_engine.program_name, __FILE__, __LINE__, hak_error_messages[hak_engine.error]); exit (EXIT_FAILURE);}}while(0)

/* Libhak non-fatal. */
#define hak_nfatal(expression, error_code) do{ if (expression) {_hak_set_error(error_code); fprintf (stderr, "%s: %s: %d: %s (hak)\n", hak_engine.program_name, __FILE__, __LINE__, hak_error_messages[hak_engine.error]);}}while(0)

/* Libhak error: fatal if HAK_FATAL is defined; non-fatal oterwise. 
   HAK_FATAL is true by default. */
#if (HAK_FATAL != HAK_FALSE) 
#define hak_error(expression, error) hak_fatal(expression, error)
#else
#define hak_error(expression, error) hak_nfatal(expression, error)
#endif	/* HAK_FATAL */


/* Log. */
int hak_log (const char *, ...);

/* Program log (same as log with hak_engine.symbol prepended to it. */
int hak_plog (const char *, ...);

const char *hak_replaced;

#endif	/* _LIBHAK_H */
